#!/bin/bash

# üöÄ VeloFlux Dashboard - Comandos R√°pidos de Produ√ß√£o
# Script com todos os comandos √∫teis para operar o dashboard

echo "üöÄ VeloFlux Dashboard - Comandos R√°pidos de Produ√ß√£o"
echo "=================================================="
echo ""

# Cores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Fun√ß√£o para mostrar comandos
show_command() {
    local title=$1
    local command=$2
    local description=$3
    
    echo -e "${BLUE}$title${NC}"
    echo -e "${GREEN}Command:${NC} $command"
    echo -e "${YELLOW}Description:${NC} $description"
    echo ""
}

echo -e "${PURPLE}üéØ COMANDOS PRINCIPAIS${NC}"
echo "===================="
echo ""

show_command "üöÄ Iniciar Dashboard" \
    "cd frontend && npm run dev" \
    "Inicia o dashboard em modo desenvolvimento (http://localhost:8084)"

show_command "üèóÔ∏è Build de Produ√ß√£o" \
    "cd frontend && npm run build" \
    "Gera build otimizado para produ√ß√£o"

show_command "üß™ Validar Integra√ß√£o" \
    "bash scripts/validacao-integracao-final.sh" \
    "Executa valida√ß√£o completa de todos os componentes (40 testes)"

show_command "üìä Teste Completo" \
    "bash scripts/test-dashboard-complete.sh" \
    "Executa suite completa de testes do dashboard"

echo -e "${PURPLE}üîß COMANDOS DE DESENVOLVIMENTO${NC}"
echo "============================="
echo ""

show_command "‚ö° TypeScript Check" \
    "cd frontend && npm run type-check" \
    "Verifica erros de TypeScript sem compilar"

show_command "üé® Lint Code" \
    "cd frontend && npm run lint" \
    "Executa linting do c√≥digo para verificar qualidade"

show_command "üîç An√°lise R√°pida" \
    "bash scripts/analise-rapida.sh" \
    "Executa an√°lise r√°pida do estado do dashboard"

show_command "üîó Validar APIs" \
    "bash scripts/validate-apis.sh" \
    "Valida integra√ß√£o com APIs do backend"

echo -e "${PURPLE}üöÄ COMANDOS DE APRIMORAMENTO${NC}"
echo "============================="
echo ""

show_command "‚ú® Implementar Melhorias" \
    "bash scripts/implementar-aprimoramentos-criticos.sh" \
    "Implementa aprimoramentos cr√≠ticos autom√°ticos"

show_command "üé® Visualiza√ß√µes Avan√ßadas" \
    "bash scripts/implementar-visualizacoes-avancadas.sh" \
    "Cria componentes de visualiza√ß√£o 3D e interativos"

show_command "üîÑ Integra√ß√£o Total" \
    "bash scripts/integracao-final-completa.sh" \
    "Executa integra√ß√£o completa de todos os aprimoramentos"

show_command "üíé Master Validation" \
    "bash scripts/master-validation.sh" \
    "Valida√ß√£o master de todo o sistema"

echo -e "${PURPLE}üìö COMANDOS DE DOCUMENTA√á√ÉO${NC}"
echo "============================"
echo ""

show_command "üìñ Ver Plano Completo" \
    "cat docs/PLANO_APRIMORAMENTOS_COMPLETO_DETALHADO.md" \
    "Visualiza o plano detalhado de aprimoramentos"

show_command "üìã Relat√≥rio Final" \
    "cat docs/ENTREGA_FINAL_DASHBOARD_PRODUCAO.md" \
    "Visualiza o relat√≥rio final de entrega"

show_command "üéØ Status de Entrega" \
    "cat docs/RELATORIO_FINAL_DASHBOARD_PRODUCAO.md" \
    "Mostra status completo de entrega"

echo -e "${PURPLE}üåê COMANDOS DE ACESSO${NC}"
echo "====================="
echo ""

echo -e "${GREEN}URLs de Acesso:${NC}"
echo "‚Ä¢ Dashboard: http://localhost:8084"
echo "‚Ä¢ Backend API: http://localhost:8080"
echo "‚Ä¢ WebSocket: ws://localhost:8080/ws"
echo ""

echo -e "${GREEN}Atalhos no Dashboard:${NC}"
echo "‚Ä¢ Ctrl+K: Command Palette (navega√ß√£o r√°pida)"
echo "‚Ä¢ Escape: Fechar modais e palettes"
echo "‚Ä¢ Tab: Navegar entre elementos"
echo ""

echo -e "${PURPLE}üé® ABAS DISPON√çVEIS${NC}"
echo "=================="
echo ""

echo -e "${GREEN}Principais:${NC}"
echo "‚Ä¢ overview - Vis√£o geral do sistema"
echo "‚Ä¢ backends - Gerenciamento de backends"
echo "‚Ä¢ health - Monitor de sa√∫de"
echo "‚Ä¢ metrics - M√©tricas do sistema"
echo ""

echo -e "${GREEN}IA & Analytics:${NC}"
echo "‚Ä¢ ai-insights - Insights de IA (NEW)"
echo "‚Ä¢ ai-metrics - M√©tricas de IA"
echo "‚Ä¢ predictions - Analytics preditivo"
echo "‚Ä¢ interactive-analytics - Analytics Interativo (PRO)"
echo ""

echo -e "${GREEN}Seguran√ßa & Billing:${NC}"
echo "‚Ä¢ security - Configura√ß√µes de seguran√ßa"
echo "‚Ä¢ security-monitoring - Monitoramento Seguran√ßa (PRO)"
echo "‚Ä¢ billing - Painel de billing"
echo "‚Ä¢ billing-export - Export Billing (NEW)"
echo ""

echo -e "${GREEN}Performance & Visualiza√ß√µes:${NC}"
echo "‚Ä¢ performance - Monitor de performance (PRO)"
echo "‚Ä¢ realtime-performance - Performance Real-time (LIVE)"
echo "‚Ä¢ network-topology - Topologia 3D (NEW)"
echo ""

echo -e "${PURPLE}üîß SOLU√á√ÉO DE PROBLEMAS${NC}"
echo "========================"
echo ""

echo -e "${YELLOW}Se o dashboard n√£o iniciar:${NC}"
echo "1. npm install (na pasta frontend)"
echo "2. Verificar se a porta 8084 est√° livre"
echo "3. Executar: bash scripts/validacao-integracao-final.sh"
echo ""

echo -e "${YELLOW}Se houver erros de TypeScript:${NC}"
echo "1. cd frontend && npm run type-check"
echo "2. Verificar imports e tipos"
echo "3. Reinstalar: rm -rf node_modules && npm install"
echo ""

echo -e "${YELLOW}Se componentes n√£o carregarem:${NC}"
echo "1. Verificar error boundary no console"
echo "2. Testar: bash scripts/test-dashboard-complete.sh"
echo "3. Checar conex√£o WebSocket"
echo ""

echo -e "${PURPLE}üìä STATUS ATUAL${NC}"
echo "==============="
echo ""

echo -e "${GREEN}‚úÖ Dashboard 100% funcional${NC}"
echo -e "${GREEN}‚úÖ 21 abas implementadas${NC}"
echo -e "${GREEN}‚úÖ 40/40 testes aprovados${NC}"
echo -e "${GREEN}‚úÖ Integra√ß√£o completa realizada${NC}"
echo -e "${GREEN}‚úÖ Visualiza√ß√µes 3D funcionais${NC}"
echo -e "${GREEN}‚úÖ Command Palette operacional${NC}"
echo -e "${GREEN}‚úÖ WebSocket real-time ativo${NC}"
echo ""

echo -e "${BLUE}üöÄ VeloFlux Dashboard - Pronto para Produ√ß√£o!${NC}"
echo -e "${YELLOW}üí° Use 'bash scripts/comandos-rapidos.sh' para ver este guia novamente${NC}"
