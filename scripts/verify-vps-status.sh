#!/bin/bash

# Script de verifica√ß√£o completa do VeloFlux VPS
# Este script verifica o status de todos os servi√ßos e endpoints

set -e

VPS_IP="107.172.207.63"
SSH_KEY="/root/.ssh/vps_veloflux"

echo "üîç Verifica√ß√£o Completa do VeloFlux VPS"
echo "========================================"

# Fun√ß√£o para executar comandos na VPS
run_remote() {
    ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no root@"$VPS_IP" "$@"
}

# Fun√ß√£o para testar URL
test_url() {
    local url=$1
    local description=$2
    echo -n "üì° $description ($url): "
    
    local status_code=$(run_remote "curl -s -o /dev/null -w '%{http_code}' --max-time 10 '$url'" 2>/dev/null || echo "000")
    
    if [[ "$status_code" =~ ^[23] ]]; then
        echo "‚úÖ OK ($status_code)"
        return 0
    else
        echo "‚ùå ERRO ($status_code)"
        return 1
    fi
}

# Verificar conex√£o SSH
echo "üì° Testando conex√£o SSH..."
if ! run_remote "echo 'SSH OK'" >/dev/null 2>&1; then
    echo "‚ùå Erro: N√£o foi poss√≠vel conectar na VPS via SSH"
    echo "üí° Certifique-se de que:"
    echo "   - A chave SSH est√° correta"
    echo "   - O servi√ßo SSH est√° rodando na VPS"
    echo "   - A porta 22 est√° aberta"
    exit 1
fi
echo "‚úÖ Conex√£o SSH OK"

echo ""
echo "üê≥ VERIFICA√á√ÉO DOS CONTAINERS"
echo "=============================="

# Status dos containers
echo "üìã Status dos containers VeloFlux:"
run_remote "cd /root/VeloFlux && docker-compose -f docker-compose.prod.fixed.yml ps"

echo ""
echo "üìã Status dos containers Nginx:"
run_remote "cd /root/nginx-proxy && docker-compose ps"

echo ""
echo "üåê VERIFICA√á√ÉO DOS ENDPOINTS"
echo "============================"

# Testes de conectividade
TOTAL_TESTS=0
PASSED_TESTS=0

urls=(
    "https://veloflux.io|Landing Page"
    "https://api.veloflux.io|API"
    "https://admin.veloflux.io|Admin Panel"
    "https://lb.veloflux.io|Load Balancer"
    "https://metrics.veloflux.io|M√©tricas"
    "https://grafana.veloflux.io|Grafana"
    "https://prometheus.veloflux.io|Prometheus"
)

for url_desc in "${urls[@]}"; do
    IFS='|' read -r url desc <<< "$url_desc"
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    if test_url "$url" "$desc"; then
        PASSED_TESTS=$((PASSED_TESTS + 1))
    fi
done

echo ""
echo "üìä VERIFICA√á√ÉO DETALHADA"
echo "========================"

# Verificar se a landing page est√° servindo o conte√∫do correto
echo "üé® Verificando conte√∫do da landing page..."
if run_remote "curl -s https://veloflux.io | grep -q 'VeloFlux'" >/dev/null 2>&1; then
    echo "‚úÖ Landing page cont√©m 'VeloFlux'"
else
    echo "‚ö†Ô∏è  Landing page pode n√£o estar servindo o conte√∫do correto"
fi

# Verificar API health
echo "üîç Verificando sa√∫de da API..."
if run_remote "curl -s https://api.veloflux.io/health" >/dev/null 2>&1; then
    echo "‚úÖ API health endpoint respondendo"
else
    echo "‚ö†Ô∏è  API health endpoint n√£o encontrado"
fi

# Verificar m√©tricas do Prometheus
echo "üìä Verificando m√©tricas do Prometheus..."
if run_remote "curl -s https://metrics.veloflux.io/metrics | grep -q 'veloflux'" >/dev/null 2>&1; then
    echo "‚úÖ M√©tricas do VeloFlux dispon√≠veis"
else
    echo "‚ö†Ô∏è  M√©tricas do VeloFlux n√£o encontradas"
fi

echo ""
echo "üì± VERIFICA√á√ÉO DE RECURSOS"
echo "=========================="

# Uso de recursos
echo "üíæ Uso de mem√≥ria:"
run_remote "free -h"

echo ""
echo "üíΩ Uso de disco:"
run_remote "df -h /"

echo ""
echo "üîÑ Uso de CPU:"
run_remote "top -bn1 | grep 'Cpu(s)'"

echo ""
echo "üê≥ Recursos dos containers:"
run_remote "docker stats --no-stream --format 'table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}'"

echo ""
echo "üìú LOGS RECENTES"
echo "================"

echo "üîç √öltimas linhas do log do VeloFlux:"
run_remote "cd /root/VeloFlux && docker-compose -f docker-compose.prod.fixed.yml logs --tail=5 veloflux-lb"

echo ""
echo "üîç √öltimas linhas do log do Nginx:"
run_remote "cd /root/nginx-proxy && docker-compose logs --tail=5 nginx"

echo ""
echo "üìä RESUMO FINAL"
echo "==============="

echo "‚úÖ Testes passou: $PASSED_TESTS/$TOTAL_TESTS"

if [ "$PASSED_TESTS" -eq "$TOTAL_TESTS" ]; then
    echo "üéâ Todos os testes passaram! VeloFlux est√° funcionando corretamente."
    echo ""
    echo "üåê Acesse seus servi√ßos em:"
    echo "   ‚Ä¢ Landing Page: https://veloflux.io"
    echo "   ‚Ä¢ Admin Panel:  https://admin.veloflux.io"
    echo "   ‚Ä¢ API:          https://api.veloflux.io"
    echo "   ‚Ä¢ Grafana:      https://grafana.veloflux.io"
    echo "   ‚Ä¢ Prometheus:   https://prometheus.veloflux.io"
else
    echo "‚ö†Ô∏è  Alguns testes falharam. Verifique os logs acima."
    echo ""
    echo "üí° Poss√≠veis solu√ß√µes:"
    echo "   1. Execute: ./scripts/fix-nginx-routing.sh"
    echo "   2. Reinicie os containers: cd /root/VeloFlux && docker-compose -f docker-compose.prod.fixed.yml restart"
    echo "   3. Verifique os logs: docker-compose logs -f"
fi

echo ""
echo "üîß Scripts √∫teis:"
echo "   ‚Ä¢ Corrigir roteamento: ./scripts/fix-nginx-routing.sh"
echo "   ‚Ä¢ Regenerar SSL:       cd /root/nginx-proxy && ./setup-ssl-webroot.sh"
echo "   ‚Ä¢ Reiniciar tudo:      cd /root/VeloFlux && docker-compose -f docker-compose.prod.fixed.yml restart"
