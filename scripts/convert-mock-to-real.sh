#!/bin/bash

# Script para converter componentes mockados para usar dados reais
# Author: VeloFlux Team  
# Date: $(date +%Y-%m-%d)

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "üîÑ CONVERS√ÉO: Dados Mockados ‚Üí Dados Reais"
echo "=========================================="

REPORT_FILE="/workspaces/VeloFlux/reports/mock-to-real-conversion-$(date +%Y%m%d-%H%M%S).md"
mkdir -p /workspaces/VeloFlux/reports

# Fun√ß√£o para escrever no relat√≥rio
write_report() {
    echo "$1" | tee -a "$REPORT_FILE"
}

write_report "# üîÑ CONVERS√ÉO DE DADOS MOCKADOS ‚Üí REAIS"
write_report "## Data: $(date '+%Y-%m-%d %H:%M:%S')"
write_report ""

# Lista de componentes cr√≠ticos que DEVEM usar dados reais
CRITICAL_COMPONENTS=(
    "/workspaces/VeloFlux/frontend/src/components/dashboard/MetricsView.tsx"
    "/workspaces/VeloFlux/frontend/src/components/dashboard/BackendOverview.tsx"
    "/workspaces/VeloFlux/frontend/src/components/dashboard/PredictiveAnalytics.tsx"
)

# Lista de componentes que podem permanecer com fallback
FALLBACK_OK_COMPONENTS=(
    "/workspaces/VeloFlux/frontend/src/components/mobile/MobileDashboard.tsx"
    "/workspaces/VeloFlux/frontend/src/components/mobile/SwipeableCards.tsx"
    "/workspaces/VeloFlux/frontend/src/components/integrations/"
)

echo -e "${BLUE}üìã Analisando componentes cr√≠ticos...${NC}"
write_report "## üéØ An√°lise de Componentes Cr√≠ticos"
write_report ""

# Fun√ß√£o para verificar se um componente est√° usando dados reais
check_component_data_source() {
    local file="$1"
    local filename=$(basename "$file")
    
    if [ ! -f "$file" ]; then
        echo -e "${RED}‚ùå Arquivo n√£o encontrado: $filename${NC}"
        return 1
    fi
    
    # Verificar se usa hooks de API reais
    API_HOOKS=$(grep -n "useSystemMetrics\|useBackends\|useRealTimeMetrics\|usePerformanceMetrics\|useAIMetrics\|useProductionData" "$file" 2>/dev/null || true)
    
    # Verificar se tem dados mockados hardcoded
    MOCK_DATA=$(grep -n "const.*=.*\[.*{" "$file" | grep -v "import\|export" 2>/dev/null || true)
    
    # Verificar se tem fallback apropriado
    FALLBACK=$(grep -n "||.*\[" "$file" 2>/dev/null || true)
    
    if [ -n "$API_HOOKS" ] && [ -n "$FALLBACK" ]; then
        echo -e "${GREEN}‚úÖ $filename: Usando APIs reais com fallback${NC}"
        write_report "### ‚úÖ \`$filename\` - **CONFORME**"
        write_report "- **Hooks de API**: Implementados"
        write_report "- **Fallback**: Configurado"
        write_report "- **Status**: Pronto para produ√ß√£o"
        return 0
    elif [ -n "$API_HOOKS" ] && [ -z "$MOCK_DATA" ]; then
        echo -e "${GREEN}‚úÖ $filename: Usando APIs reais${NC}"
        write_report "### ‚úÖ \`$filename\` - **CONFORME**"
        write_report "- **Hooks de API**: Implementados"
        write_report "- **Status**: Pronto para produ√ß√£o"
        return 0
    elif [ -n "$MOCK_DATA" ] && [ -z "$API_HOOKS" ]; then
        echo -e "${RED}‚ùå $filename: Apenas dados mockados${NC}"
        write_report "### ‚ùå \`$filename\` - **NECESSITA CONVERS√ÉO**"
        write_report "- **Problema**: Usando apenas dados mockados"
        write_report "- **A√ß√£o**: Implementar hooks de API"
        return 1
    else
        echo -e "${YELLOW}‚ö†Ô∏è $filename: Status indefinido${NC}"
        write_report "### ‚ö†Ô∏è \`$filename\` - **REVISAR**"
        write_report "- **Status**: Necessita an√°lise manual"
        return 2
    fi
}

# Verificar componentes cr√≠ticos
CRITICAL_ISSUES=0
for component in "${CRITICAL_COMPONENTS[@]}"; do
    if ! check_component_data_source "$component"; then
        ((CRITICAL_ISSUES++))
    fi
    write_report ""
done

# Verificar o hook useAdvancedAnalytics especificamente
echo -e "\n${YELLOW}üîç Analisando useAdvancedAnalytics...${NC}"
write_report "## üîç An√°lise Espec√≠fica: useAdvancedAnalytics"
write_report ""

ANALYTICS_HOOK="/workspaces/VeloFlux/frontend/src/hooks/useAdvancedAnalytics.ts"
if [ -f "$ANALYTICS_HOOK" ]; then
    # Verificar se tem TODO para implementar WebSocket
    WEBSOCKET_TODO=$(grep -n "TODO.*WebSocket\|TODO.*real-time" "$ANALYTICS_HOOK" 2>/dev/null || true)
    
    # Verificar se tem geradores de mock
    MOCK_GENERATORS=$(grep -n "generateMock" "$ANALYTICS_HOOK" 2>/dev/null || true)
    
    if [ -n "$WEBSOCKET_TODO" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è useAdvancedAnalytics: WebSocket n√£o implementado${NC}"
        write_report "### ‚ö†Ô∏è \`useAdvancedAnalytics.ts\` - **PENDENTE**"
        write_report "- **Problema**: WebSocket real-time n√£o implementado"
        write_report "- **TODOs encontrados**:"
        echo "$WEBSOCKET_TODO" | while IFS= read -r line; do
            write_report "  - \`$line\`"
        done
        ((CRITICAL_ISSUES++))
    fi
    
    if [ -n "$MOCK_GENERATORS" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è useAdvancedAnalytics: Usando geradores de mock${NC}"
        write_report "- **Geradores Mock**: $(echo "$MOCK_GENERATORS" | wc -l) encontrados"
        write_report "- **A√ß√£o**: Substituir por APIs reais"
    fi
else
    echo -e "${RED}‚ùå Hook useAdvancedAnalytics n√£o encontrado${NC}"
    write_report "### ‚ùå Hook n√£o encontrado"
    ((CRITICAL_ISSUES++))
fi

write_report ""

# Gerar plano de a√ß√£o
echo -e "\n${BLUE}üìã Gerando plano de a√ß√£o...${NC}"
write_report "## üìã Plano de A√ß√£o"
write_report ""

if [ "$CRITICAL_ISSUES" -eq 0 ]; then
    echo -e "${GREEN}üéâ TODOS OS COMPONENTES CR√çTICOS EST√ÉO CONFORMES!${NC}"
    write_report "### üéâ STATUS: COMPONENTES CR√çTICOS CONFORMES"
    write_report "Todos os componentes cr√≠ticos do dashboard est√£o usando dados reais."
else
    echo -e "${RED}‚ö†Ô∏è $CRITICAL_ISSUES PROBLEMA(S) CR√çTICO(S) ENCONTRADO(S)${NC}"
    write_report "### ‚ö†Ô∏è STATUS: $CRITICAL_ISSUES PROBLEMA(S) CR√çTICO(S)"
    write_report ""
    write_report "#### A√ß√µes Imediatas Necess√°rias:"
    write_report ""
    write_report "1. **useAdvancedAnalytics.ts**"
    write_report "   - Implementar WebSocket para atualiza√ß√µes em tempo real"
    write_report "   - Substituir \`generateMockMetrics()\` por \`useSystemMetrics()\`"
    write_report "   - Substituir \`generateMockTimeSeries()\` por \`usePerformanceMetrics()\`"
    write_report "   - Implementar \`startRealTimeUpdates()\` e \`stopRealTimeUpdates()\`"
    write_report ""
    write_report "2. **Componentes AI**"
    write_report "   - Conectar componentes AI aos hooks \`useAIMetrics()\` e \`useAIPredictions()\`"
    write_report "   - Implementar fallbacks para quando AI n√£o est√° dispon√≠vel"
    write_report ""
    write_report "3. **Multi-tenant Components**"
    write_report "   - Conectar aos hooks \`useMultiTenant()\` com dados reais"
    write_report "   - Implementar APIs de gerenciamento de tenants"
    write_report ""
    write_report "4. **WebSocket Real-time**"
    write_report "   - Implementar conex√£o WebSocket em \`/lib/websocket.ts\`"
    write_report "   - Configurar endpoints WebSocket no backend"
    write_report "   - Implementar reconex√£o autom√°tica"
fi

# Verificar se o backend est√° rodando para testes
echo -e "\n${YELLOW}üåê Verificando conectividade com backend...${NC}"
write_report ""
write_report "## üåê Conectividade Backend"
write_report ""

BACKEND_RUNNING=0
if curl -s --connect-timeout 3 "http://localhost:8080/health" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Backend principal acess√≠vel (porta 8080)${NC}"
    write_report "- ‚úÖ **Backend Principal**: Acess√≠vel em http://localhost:8080"
    ((BACKEND_RUNNING++))
else
    echo -e "${RED}‚ùå Backend principal inacess√≠vel (porta 8080)${NC}"
    write_report "- ‚ùå **Backend Principal**: Inacess√≠vel"
fi

if curl -s --connect-timeout 3 "http://localhost:9090/api/status" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ API Gateway acess√≠vel (porta 9090)${NC}"
    write_report "- ‚úÖ **API Gateway**: Acess√≠vel em http://localhost:9090"
    ((BACKEND_RUNNING++))
else
    echo -e "${RED}‚ùå API Gateway inacess√≠vel (porta 9090)${NC}"
    write_report "- ‚ùå **API Gateway**: Inacess√≠vel"
fi

# Gerar comandos para corre√ß√£o
write_report ""
write_report "## üõ†Ô∏è Comandos para Corre√ß√£o"
write_report ""

if [ "$BACKEND_RUNNING" -eq 0 ]; then
    write_report "### 1. Iniciar Backend"
    write_report "\`\`\`bash"
    write_report "cd /workspaces/VeloFlux"
    write_report "docker-compose up -d"
    write_report "# Aguardar 30 segundos para inicializa√ß√£o"
    write_report "sleep 30"
    write_report "\`\`\`"
    write_report ""
fi

write_report "### 2. Executar Testes de Valida√ß√£o"
write_report "\`\`\`bash"
write_report "cd /workspaces/VeloFlux"
write_report "./scripts/validate-apis.sh"
write_report "./scripts/test-dashboard-complete.sh"
write_report "\`\`\`"
write_report ""

write_report "### 3. Implementar WebSocket (Priorit√°rio)"
write_report "\`\`\`typescript"
write_report "// Arquivo: /frontend/src/lib/websocket.ts"
write_report "export class WebSocketManager {"
write_report "  connect() { /* implementar */ }"
write_report "  disconnect() { /* implementar */ }"
write_report "  subscribe(channel: string, callback: Function) { /* implementar */ }"
write_report "}"
write_report "\`\`\`"
write_report ""

# Resumo final
write_report "## üìä Resumo da An√°lise"
write_report ""
write_report "| Categoria | Status | A√ß√£o |"
write_report "|-----------|---------|------|"
write_report "| Componentes Cr√≠ticos | $([ "$CRITICAL_ISSUES" -eq 0 ] && echo "‚úÖ Conforme" || echo "‚ùå $CRITICAL_ISSUES problemas") | $([ "$CRITICAL_ISSUES" -eq 0 ] && echo "Nenhuma" || echo "Implementar hooks de API") |"
write_report "| Backend Connectivity | $([ "$BACKEND_RUNNING" -eq 2 ] && echo "‚úÖ Funcionando" || echo "‚ùå Problemas") | $([ "$BACKEND_RUNNING" -eq 2 ] && echo "Nenhuma" || echo "Iniciar servi√ßos") |"
write_report "| WebSocket Real-time | ‚ùå N√£o implementado | Implementar urgente |"
write_report "| Fallback Data | ‚úÖ Configurado | Manter |"
write_report ""

# Calcular score geral
TOTAL_CHECKS=4
PASSED_CHECKS=$((4 - CRITICAL_ISSUES))
if [ "$BACKEND_RUNNING" -eq 2 ]; then
    ((PASSED_CHECKS++))
    ((TOTAL_CHECKS++))
fi

SCORE=$((PASSED_CHECKS * 100 / TOTAL_CHECKS))

write_report "### üéØ Score de Prontid√£o para Produ√ß√£o: **${SCORE}%**"
write_report ""

if [ "$SCORE" -ge 80 ]; then
    echo -e "\n${GREEN}üéâ DASHBOARD COM BOA PRONTID√ÉO PARA PRODU√á√ÉO (${SCORE}%)${NC}"
    write_report "**Status**: ‚úÖ **Boa prontid√£o para produ√ß√£o**"
elif [ "$SCORE" -ge 60 ]; then
    echo -e "\n${YELLOW}‚ö†Ô∏è DASHBOARD PRECISA DE AJUSTES (${SCORE}%)${NC}"
    write_report "**Status**: ‚ö†Ô∏è **Necessita ajustes antes da produ√ß√£o**"
else
    echo -e "\n${RED}‚ùå DASHBOARD N√ÉO EST√Å PRONTO PARA PRODU√á√ÉO (${SCORE}%)${NC}"
    write_report "**Status**: ‚ùå **N√£o est√° pronto para produ√ß√£o**"
fi

write_report ""
write_report "---"
write_report "**Relat√≥rio gerado em**: $(date '+%Y-%m-%d %H:%M:%S')"
write_report "**Arquivo**: \`$REPORT_FILE\`"

echo -e "\n${GREEN}üìÑ Relat√≥rio detalhado salvo em: $REPORT_FILE${NC}"

exit $CRITICAL_ISSUES
