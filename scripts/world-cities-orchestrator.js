#!/usr/bin/env node

/**
 * VeloFlux World Cities Generator - Orquestrador Principal
 * Sistema modular para gera√ß√£o do world-cities.json
 */

const path = require('path');
const fs = require('fs').promises;

class WorldCitiesOrchestrator {
    constructor() {
        this.startTime = Date.now();
        this.modules = {};
        this.stats = {
            totalProcessed: 0,
            totalGenerated: 0,
            errors: 0,
            warnings: 0
        };
    }

    /**
     * Carregar todos os m√≥dulos dinamicamente
     */
    async loadModules() {
        console.log('üì¶ Carregando m√≥dulos...');
        
        try {
            // Carregar configura√ß√µes primeiro
            this.config = require('./world-cities/config');
            
            // Verificar se m√≥dulos existem antes de carregar
            const moduleFiles = [
                'data-sources',
                'csv-parser', 
                'data-normalizer',
                'geo-enricher',
                'json-generator',
                'validators',
                'utils'
            ];

            for (const moduleFile of moduleFiles) {
                const modulePath = `./world-cities/${moduleFile}`;
                try {
                    await fs.access(path.join(__dirname, `world-cities/${moduleFile}.js`));
                    this.modules[moduleFile] = require(modulePath);
                    console.log(`‚úÖ M√≥dulo carregado: ${moduleFile}`);
                } catch (error) {
                    console.log(`‚ö†Ô∏è  M√≥dulo n√£o encontrado: ${moduleFile} - ser√° criado`);
                    this.modules[moduleFile] = null;
                }
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao carregar m√≥dulos:', error.message);
            throw error;
        }
    }

    /**
     * Executar pipeline completo
     */
    async run(options = {}) {
        try {
            console.log('üöÄ Iniciando World Cities Generator...\n');
            
            // Carregar m√≥dulos
            await this.loadModules();
            
            // Verificar quais m√≥dulos est√£o dispon√≠veis
            const availableModules = Object.entries(this.modules)
                .filter(([name, module]) => module !== null)
                .map(([name]) => name);
                
            console.log(`üìã M√≥dulos dispon√≠veis: ${availableModules.join(', ')}`);
            
            if (availableModules.length === 0) {
                console.log('‚ö†Ô∏è  Nenhum m√≥dulo encontrado. Criando estrutura b√°sica...');
                await this.createBasicStructure();
                return;
            }
            
            // Executar pipeline baseado nos m√≥dulos dispon√≠veis
            await this.executePipeline(options);
            
            this.printSummary();
            
        } catch (error) {
            console.error('‚ùå Erro na execu√ß√£o:', error.message);
            if (options.debug) {
                console.error(error.stack);
            }
            process.exit(1);
        }
    }

    /**
     * Executar pipeline de processamento
     */
    async executePipeline(options) {
        console.log('\nüîÑ Executando pipeline de processamento...\n');
        
        // Fase 1: Aquisi√ß√£o de dados
        let rawData = null;
        if (this.modules['data-sources']) {
            console.log('üì• Fase 1: Aquisi√ß√£o de dados...');
            const DataSources = this.modules['data-sources'];
            const dataSources = new DataSources(this.config?.dataSources);
            rawData = await dataSources.acquire();
            console.log('‚úÖ Dados adquiridos\n');
        }
        
        // Fase 2: Parsing de dados
        let parsedData = rawData;
        if (this.modules['csv-parser'] && rawData) {
            console.log('üìä Fase 2: Parsing de dados...');
            const CsvParser = this.modules['csv-parser'];
            const parser = new CsvParser(this.config?.parsing);
            parsedData = await parser.parse(rawData);
            console.log('‚úÖ Dados parseados\n');
        }
        
        // Fase 3: Normaliza√ß√£o
        let normalizedData = parsedData;
        if (this.modules['data-normalizer'] && parsedData) {
            console.log('üîß Fase 3: Normaliza√ß√£o...');
            const DataNormalizer = this.modules['data-normalizer'];
            const normalizer = new DataNormalizer(this.config?.normalization);
            normalizedData = await normalizer.normalize(parsedData);
            this.stats.totalProcessed = normalizedData?.length || 0;
            console.log('‚úÖ Dados normalizados\n');
        }
        
        // Fase 4: Enriquecimento
        let enrichedData = normalizedData;
        if (this.modules['geo-enricher'] && normalizedData) {
            console.log('üåç Fase 4: Enriquecimento geogr√°fico...');
            const GeoEnricher = this.modules['geo-enricher'];
            const enricher = new GeoEnricher(this.config?.enrichment);
            enrichedData = await enricher.enrich(normalizedData);
            console.log('‚úÖ Dados enriquecidos\n');
        }
        
        // Fase 5: Gera√ß√£o do JSON
        let finalData = enrichedData;
        if (this.modules['json-generator'] && enrichedData) {
            console.log('üìù Fase 5: Gera√ß√£o do JSON...');
            const JsonGenerator = this.modules['json-generator'];
            const generator = new JsonGenerator(this.config?.output);
            finalData = await generator.generate(enrichedData);
            this.stats.totalGenerated = finalData?.length || 0;
            console.log('‚úÖ JSON gerado\n');
        }
        
        // Fase 6: Valida√ß√£o
        if (this.modules['validators'] && finalData) {
            console.log('üîç Fase 6: Valida√ß√£o...');
            const Validators = this.modules['validators'];
            const validator = new Validators(this.config?.validation);
            const results = await validator.validate(finalData);
            this.stats.warnings = results.warnings || 0;
            this.stats.errors = results.errors || 0;
            console.log('‚úÖ Valida√ß√£o conclu√≠da\n');
        }
        
        // Salvar resultado final
        if (finalData) {
            await this.saveOutput(finalData, options);
        }
    }

    /**
     * Criar estrutura b√°sica quando m√≥dulos n√£o existem
     */
    async createBasicStructure() {
        console.log('üèóÔ∏è  Criando estrutura b√°sica de m√≥dulos...\n');
        
        // Verificar se config existe
        try {
            await fs.access(path.join(__dirname, 'world-cities/config.js'));
            console.log('‚úÖ Arquivo de configura√ß√£o j√° existe');
        } catch {
            console.log('‚ö†Ô∏è  Arquivo de configura√ß√£o n√£o encontrado');
            console.log('üìù Execute: node scripts/create-modules.js para criar os m√≥dulos necess√°rios');
        }
        
        // Listar pr√≥ximos passos
        console.log('\nüìã Pr√≥ximos passos:');
        console.log('1. Execute: node scripts/create-modules.js');
        console.log('2. Configure as fontes de dados em world-cities/config.js');
        console.log('3. Execute novamente: node scripts/generate-world-cities.js');
    }

    /**
     * Salvar output final
     */
    async saveOutput(data, options) {
        console.log('üíæ Salvando arquivos de sa√≠da...');
        
        const outputDir = path.join(__dirname, 'output');
        await fs.mkdir(outputDir, { recursive: true });
        
        // Salvar vers√£o completa
        const outputPath = path.join(outputDir, 'world-cities.json');
        await fs.writeFile(outputPath, JSON.stringify(data, null, 2));
        console.log(`‚úÖ Arquivo salvo: ${outputPath}`);
        
        // Copiar para destino final se especificado
        if (this.config?.paths?.finalDestination) {
            const finalPath = this.config.paths.finalDestination;
            await fs.copyFile(outputPath, finalPath);
            console.log(`‚úÖ Arquivo copiado para: ${finalPath}`);
        }
        
        // Salvar estat√≠sticas
        await this.saveStatistics();
    }

    /**
     * Salvar estat√≠sticas da execu√ß√£o
     */
    async saveStatistics() {
        const stats = {
            timestamp: new Date().toISOString(),
            duration: `${((Date.now() - this.startTime) / 1000).toFixed(2)}s`,
            ...this.stats,
            availableModules: Object.keys(this.modules).filter(name => this.modules[name] !== null)
        };
        
        const statsPath = path.join(__dirname, 'output/generation-stats.json');
        await fs.writeFile(statsPath, JSON.stringify(stats, null, 2));
        console.log(`üìä Estat√≠sticas salvas: ${statsPath}`);
    }

    /**
     * Imprimir resumo da execu√ß√£o
     */
    printSummary() {
        const duration = ((Date.now() - this.startTime) / 1000).toFixed(2);
        
        console.log('\n' + '='.repeat(50));
        console.log('üéâ EXECU√á√ÉO CONCLU√çDA');
        console.log('='.repeat(50));
        console.log(`‚è±Ô∏è  Tempo total: ${duration}s`);
        console.log(`üìä Cidades processadas: ${this.stats.totalProcessed.toLocaleString()}`);
        console.log(`üìù Cidades geradas: ${this.stats.totalGenerated.toLocaleString()}`);
        console.log(`‚ö†Ô∏è  Avisos: ${this.stats.warnings}`);
        console.log(`‚ùå Erros: ${this.stats.errors}`);
        console.log('='.repeat(50) + '\n');
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    const args = process.argv.slice(2);
    const options = {
        debug: args.includes('--debug'),
        dev: args.includes('--dev'),
        force: args.includes('--force')
    };
    
    const orchestrator = new WorldCitiesOrchestrator();
    orchestrator.run(options);
}

module.exports = WorldCitiesOrchestrator;
