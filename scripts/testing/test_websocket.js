#!/usr/bin/env node

/**
 * üß™ Teste WebSocket para VeloFlux
 * 
 * Este script testa os endpoints WebSocket implementados
 * e demonstra como us√°-los em uma aplica√ß√£o real.
 */

const WebSocket = require('ws');
const http = require('http');

// Configura√ß√£o
const VELOFLUX_HOST = process.env.VELOFLUX_HOST || 'localhost';
const VELOFLUX_PORT = process.env.VELOFLUX_PORT || '8080';
const BASE_URL = `http://${VELOFLUX_HOST}:${VELOFLUX_PORT}`;
const WS_BASE_URL = `ws://${VELOFLUX_HOST}:${VELOFLUX_PORT}`;

console.log('üîå Iniciando teste WebSocket do VeloFlux...');
console.log(`üì° Host: ${VELOFLUX_HOST}:${VELOFLUX_PORT}`);
console.log('');

// Fun√ß√£o para fazer requests HTTP
function makeRequest(method, path, data = null) {
    return new Promise((resolve, reject) => {
        const options = {
            hostname: VELOFLUX_HOST,
            port: VELOFLUX_PORT,
            path: path,
            method: method,
            headers: {
                'Content-Type': 'application/json',
            }
        };

        const req = http.request(options, (res) => {
            let data = '';
            res.on('data', (chunk) => {
                data += chunk;
            });
            res.on('end', () => {
                try {
                    const parsed = JSON.parse(data);
                    resolve({ status: res.statusCode, data: parsed });
                } catch (error) {
                    resolve({ status: res.statusCode, data: data });
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (data) {
            req.write(JSON.stringify(data));
        }

        req.end();
    });
}

// Fun√ß√£o para testar conex√£o WebSocket
function testWebSocket(endpoint, name, duration = 5000) {
    return new Promise((resolve, reject) => {
        console.log(`üîç Testando WebSocket ${name}...`);
        
        const ws = new WebSocket(`${WS_BASE_URL}/api/ws/${endpoint}`);
        let messagesReceived = 0;
        let connected = false;

        const timeout = setTimeout(() => {
            if (connected) {
                console.log(`‚úÖ ${name}: Conectado e recebeu ${messagesReceived} mensagens`);
                ws.close();
                resolve({ success: true, messages: messagesReceived });
            } else {
                console.log(`‚ùå ${name}: Falha na conex√£o`);
                ws.close();
                resolve({ success: false, messages: 0 });
            }
        }, duration);

        ws.on('open', () => {
            console.log(`   üì° ${name}: Conectado`);
            connected = true;
        });

        ws.on('message', (data) => {
            try {
                const message = JSON.parse(data);
                messagesReceived++;
                console.log(`   üì® ${name}: Recebida mensagem do tipo "${message.type}"`);
                
                // Log detalhado da primeira mensagem
                if (messagesReceived === 1) {
                    console.log(`   üìã ${name}: Dados:`, JSON.stringify(message, null, 2).substring(0, 200) + '...');
                }
            } catch (error) {
                console.log(`   ‚ö†Ô∏è  ${name}: Erro ao parsear mensagem:`, error.message);
            }
        });

        ws.on('error', (error) => {
            console.log(`   ‚ùå ${name}: Erro WebSocket:`, error.message);
            clearTimeout(timeout);
            resolve({ success: false, messages: messagesReceived, error: error.message });
        });

        ws.on('close', () => {
            console.log(`   üîí ${name}: Conex√£o fechada`);
        });
    });
}

// Fun√ß√£o para testar controles WebSocket
async function testWebSocketControls() {
    console.log('üéõÔ∏è  Testando controles WebSocket...');
    
    try {
        // Testar pause
        console.log('   ‚è∏Ô∏è  Pausando atualiza√ß√µes de backends...');
        const pauseResult = await makeRequest('POST', '/api/ws/control', {
            action: 'pause',
            type: 'backends'
        });
        
        if (pauseResult.status === 200) {
            console.log('   ‚úÖ Pause: OK');
        } else {
            console.log('   ‚ùå Pause: Falhou');
        }

        // Esperar um pouco
        await new Promise(resolve => setTimeout(resolve, 1000));

        // Testar resume
        console.log('   ‚ñ∂Ô∏è  Retomando atualiza√ß√µes de backends...');
        const resumeResult = await makeRequest('POST', '/api/ws/control', {
            action: 'resume',
            type: 'backends'
        });
        
        if (resumeResult.status === 200) {
            console.log('   ‚úÖ Resume: OK');
        } else {
            console.log('   ‚ùå Resume: Falhou');
        }

        // Testar force update
        console.log('   üîÑ For√ßando atualiza√ß√£o...');
        const forceResult = await makeRequest('POST', '/api/ws/force-update', {
            type: 'all'
        });
        
        if (forceResult.status === 200) {
            console.log('   ‚úÖ Force Update: OK');
        } else {
            console.log('   ‚ùå Force Update: Falhou');
        }

        return true;
    } catch (error) {
        console.log('   ‚ùå Erro nos controles:', error.message);
        return false;
    }
}

// Fun√ß√£o principal
async function main() {
    const results = {
        total: 0,
        passed: 0,
        failed: 0
    };

    // Testar se o servidor est√° rodando
    console.log('üè• Verificando se o servidor est√° rodando...');
    try {
        const healthCheck = await makeRequest('GET', '/health');
        if (healthCheck.status === 200) {
            console.log('‚úÖ Servidor VeloFlux est√° rodando');
        } else {
            console.log('‚ùå Servidor n√£o responde adequadamente');
            console.log('   Status:', healthCheck.status);
            return;
        }
    } catch (error) {
        console.log('‚ùå N√£o foi poss√≠vel conectar ao servidor VeloFlux');
        console.log('   Erro:', error.message);
        console.log('');
        console.log('üí° Certifique-se de que o VeloFlux est√° rodando em', BASE_URL);
        return;
    }

    console.log('');

    // Testar WebSockets
    const wsTests = [
        { endpoint: 'backends', name: 'Backends' },
        { endpoint: 'metrics', name: 'Metrics' },
        { endpoint: 'status', name: 'Status' }
    ];

    for (const test of wsTests) {
        results.total++;
        const result = await testWebSocket(test.endpoint, test.name, 5000);
        if (result.success) {
            results.passed++;
        } else {
            results.failed++;
        }
        console.log('');
    }

    // Testar controles
    results.total++;
    const controlsOk = await testWebSocketControls();
    if (controlsOk) {
        results.passed++;
    } else {
        results.failed++;
    }

    // Resultados finais
    console.log('');
    console.log('üìä Resultados dos testes:');
    console.log(`‚úÖ Passou: ${results.passed}/${results.total}`);
    console.log(`‚ùå Falhou: ${results.failed}/${results.total}`);
    console.log('');

    if (results.failed === 0) {
        console.log('üéâ Todos os testes WebSocket passaram!');
        console.log('');
        console.log('üí° Pr√≥ximos passos:');
        console.log('   1. Integre os WebSockets ao seu frontend');
        console.log('   2. Configure reconex√£o autom√°tica');
        console.log('   3. Implemente tratamento de erros');
        console.log('   4. Monitore o n√∫mero de clientes conectados');
        console.log('');
        console.log('üìö Documenta√ß√£o: docs/websocket_api.md');
        process.exit(0);
    } else {
        console.log('‚ö†Ô∏è  Alguns testes falharam. Verifique a configura√ß√£o do VeloFlux.');
        console.log('');
        console.log('üîß Poss√≠veis solu√ß√µes:');
        console.log('   1. Verifique se o VeloFlux est√° rodando');
        console.log('   2. Confirme que a porta', VELOFLUX_PORT, 'est√° acess√≠vel');
        console.log('   3. Verifique os logs do servidor para erros');
        console.log('   4. Teste conectividade b√°sica com curl ou browser');
        process.exit(1);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    main().catch(error => {
        console.error('‚ùå Erro fatal:', error);
        process.exit(1);
    });
}

module.exports = { testWebSocket, testWebSocketControls, makeRequest };
