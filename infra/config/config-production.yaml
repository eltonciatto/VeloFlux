# VeloFlux LB - Configuração de Produção para Codespace
# IP Público: 74.249.85.198
# Codespace: curly-yodel-w5759w9pgvjf7j5

global:
  bind_address: "0.0.0.0:80"
  tls_bind_address: "0.0.0.0:443"
  metrics_address: "0.0.0.0:8080"
  
  # TLS Configuration - Desabilitado para testes Codespace
  tls:
    auto_cert: false
    cert_dir: "/etc/ssl/certs/veloflux"

  # Health Check Defaults
  health_check:
    interval: "30s"
    timeout: "5s"
    retries: 3

  # Rate Limiting
  rate_limit:
    requests_per_second: 100
    burst_size: 200
    cleanup_interval: "5m"

  # WAF
  waf:
    enabled: true
    level: "standard"
    log_violations: true

# API Server  
api:
  bind_address: "0.0.0.0:9090"
  auth_enabled: true
  username: "admin"
  password: "veloflux-admin-password"

# Backend Pools - Configuração Real dos Serviços Docker
pools:
  # Pool do Frontend React (interface do usuário)
  - name: "frontend-pool"
    algorithm: "round_robin"
    sticky_sessions: false
    backends:
      - address: "frontend:3000"
        weight: 100
        health_check:
          path: "/"
          interval: "30s"
          timeout: "5s"
          expected_status: 200

  # Pool do Backend Principal (Load Balancer API)
  - name: "backend-api-pool"
    algorithm: "least_conn"
    sticky_sessions: false
    backends:
      - address: "backend:9090"
        weight: 100
        health_check:
          path: "/api/health"
          interval: "15s"
          timeout: "3s"
          expected_status: 200

  # Pool padrão para demonstração (pode ser removido em produção real)
  - name: "default-pool"
    algorithm: "round_robin"
    sticky_sessions: false
    backends:
      - address: "backend:9090"
        weight: 100
        health_check:
          path: "/api/health"
          interval: "30s"
          timeout: "5s"
          expected_status: 200

# Routing Rules - Configuração Real para Produção Multi-Tenant
routes:
  # API Routes - Backend Load Balancer (APIs de gestão e tenant)
  - host: "*"
    pool: "backend-api-pool"
    path_prefix: "/api"
    
  # Auth Routes - Sistema de autenticação
  - host: "*"
    pool: "backend-api-pool"
    path_prefix: "/auth"
    
  # Health Check do Sistema
  - host: "*"
    pool: "backend-api-pool"
    path_prefix: "/health"
    
  # Métricas Prometheus
  - host: "*"
    pool: "backend-api-pool"
    path_prefix: "/metrics"
    
  # Frontend React - Interface do usuário (rota padrão)
  - host: "*"
    pool: "frontend-pool"
    path_prefix: "/"

# NOTA: Em produção real, tenants criarão pools dinamicamente via API:
# 
# Exemplo de pools criados dinamicamente pelos tenants:
# - empresa-a:pool:web-servers    (via POST /api/tenants/empresa-a/pools)
# - empresa-a:pool:api-servers    (criado pelo tenant empresa-a)
# - empresa-b:pool:microservices  (criado pelo tenant empresa-b)
# 
# Estes pools não aparecem neste arquivo, são criados em runtime
# e persistidos no Redis/Database cluster.

# Cluster Configuration
cluster:
  redis_address: "redis:6379"
  redis_password: ""
  redis_db: 0
  instance_id: "veloflux-lb-prod"
  heartbeat_interval: "30s"
  leader_election_timeout: "60s"
