# VeloFlux Backend Configuration
# Configuração de produção com autenticação habilitada

global:
  bind_address: "0.0.0.0:80"
  tls_bind_address: "0.0.0.0:443"
  metrics_address: "0.0.0.0:8080"
  
  health_check:
    interval: "30s"
    timeout: "5s"
    retries: 3

  rate_limit:
    requests_per_second: 100
    burst_size: 200
    cleanup_interval: "5m"

  waf:
    enabled: true
    level: "standard"
    log_violations: true

  ai:
    enabled: true
    model_type: "neural_network"
    training_interval: "5m"
    prediction_window: "30s"
    history_retention: "24h"
    min_data_points: 100
    confidence_threshold: 0.8
    adaptive_algorithms: true
    application_aware: true
    auto_scaling: true
    health_monitoring: true
    failover_enabled: true
    backup_models: true

# Authentication Configuration - PRODUÇÃO ATIVA
auth:
  enabled: true
  jwt_secret: "VeloFlux2025-Production-Secret-Key-Super-Secure"
  jwt_issuer: "veloflux-production"
  jwt_audience: "veloflux-users"
  token_validity: "8h"
  refresh_token_validity: "24h"
  password_policy:
    min_length: 8
    require_uppercase: true
    require_lowercase: true
    require_numbers: true
  oidc:
    enabled: true
    issuer_url: "https://accounts.google.com"
    client_id: "your-google-client-id"
    client_secret: "your-google-client-secret"
    redirect_uri: "http://localhost/auth/callback"

# API Server Configuration - AUTENTICAÇÃO ATIVA
api:
  bind_address: "0.0.0.0:9090"
  auth_enabled: true
  username: "admin"
  password: "VeloFlux2025!"
  cors_enabled: true
  allowed_origins: ["http://localhost", "http://localhost:3000", "http://localhost:80"]
  rate_limit:
    enabled: true
    requests_per_minute: 100

# Cluster Configuration
cluster:
  enabled: true
  redis_address: "redis:6379"
  redis_password: ""
  redis_db: 0
  instance_id: "veloflux-backend"
  heartbeat_interval: "30s"
  leader_election_timeout: "60s"

# Tenant Configuration
tenant:
  enabled: true
  default_limits:
    requests_per_second: 100
    concurrent_connections: 1000
    bandwidth_mbps: 100
  auto_provisioning: true

# Billing Configuration
billing:
  enabled: true
  provider: "stripe"
  stripe_api_key: "${STRIPE_API_KEY}"
  stripe_webhook_key: ""  # Will be set when webhook is configured
  webhook_endpoint: "/billing/webhook"
  success_url: "http://localhost:3000/billing/success"
  cancel_url: "http://localhost:3000/billing/cancel"
  plan_configs:
    - plan_type: "free"
      stripe_price_id: "price_1RbVEGBLQoA2ESIG1nGYAEAv"
      display_name: "Free Plan"
      description: "Basic features for getting started"
      features: ["10 requests/sec", "Basic support"]
      price_monthly: 0
      price_yearly: 0
      trial_days: 0
    - plan_type: "pro"
      stripe_price_id: "price_1RbVEkBLQoA2ESIG1lQWhURH"  # Will be created in Stripe
      display_name: "Pro Plan"
      description: "Advanced features for growing businesses"
      features: ["100 requests/sec", "Priority support", "Advanced analytics"]
      price_monthly: 2900  # $29.00
      price_yearly: 29000  # $290.00 (save 2 months)
      trial_days: 14
    - plan_type: "enterprise"
      stripe_price_id: "price_1RbVFDBLQoA2ESIGmUAJsYmE"  # Will be created in Stripe
      display_name: "Enterprise Plan"
      description: "Full features for large organizations"
      features: ["Unlimited requests", "24/7 support", "Custom integrations", "SLA guarantee"]
      price_monthly: 9900  # $99.00
      price_yearly: 99000  # $990.00 (save 2 months)
      trial_days: 30

# User accounts for testing
users:
  - username: "admin"
    password: "VeloFlux2025!"
    role: "admin"
    email: "admin@veloflux.io"
    
  - username: "user1"
    password: "User123!"
    role: "user"
    email: "user1@veloflux.io"
    
  - username: "tenant1"
    password: "Tenant123!"
    role: "tenant"
    email: "tenant1@veloflux.io"

# Backend Pools
# Backend Pools - Configuração Real dos Serviços Docker
pools:
  # Pool do Frontend React (interface do usuário)
  - name: "frontend-pool"
    algorithm: "round_robin"
    sticky_sessions: false
    backends:
      - address: "frontend:80"
        weight: 100
        health_check:
          path: "/"
          interval: "30s"
          timeout: "5s"
          expected_status: 200

  # Pool do Backend Principal (Load Balancer API)
  - name: "backend-api-pool"
    algorithm: "least_conn"
    sticky_sessions: false
    backends:
      - address: "backend:9090"
        weight: 100
        health_check:
          path: "/api/health"
          interval: "15s"
          timeout: "3s"
          expected_status: 200

  # Pool padrão para demonstração (pode ser removido em produção real)
  - name: "default-pool"
    algorithm: "round_robin"
    sticky_sessions: false
    backends:
      - address: "backend:9090"
        weight: 100
        health_check:
          path: "/api/health"
          interval: "30s"
          timeout: "5s"
          expected_status: 200

# Routing Rules - Configuração Corrigida para API Consistente
routes:
  # Health Check do Sistema (sem prefixo /api)
  - host: "*"
    pool: "backend-api-pool"
    path_prefix: "/health"
    
  # Métricas Prometheus (sem prefixo /api)
  - host: "*"
    pool: "backend-api-pool"
    path_prefix: "/metrics"
    
  # Auth Routes - Sistema de autenticação (sem prefixo /api)
  - host: "*"
    pool: "backend-api-pool"
    path_prefix: "/auth"
    
  # API Routes - Backend Load Balancer (COM prefixo /api)
  - host: "*"
    pool: "backend-api-pool"
    path_prefix: "/api"
    
  # Frontend React - Interface do usuário (rota padrão)
  - host: "*"
    pool: "frontend-pool"
    path_prefix: "/"

# NOTA: Em produção real, tenants criarão pools dinamicamente via API:
# 
# Exemplo de pools criados dinamicamente pelos tenants:
# - empresa-a:pool:web-servers    (via POST /api/tenants/empresa-a/pools)
# - empresa-a:pool:api-servers    (criado pelo tenant empresa-a)
# - empresa-b:pool:microservices  (criado pelo tenant empresa-b)
# 
# Estes pools não aparecem neste arquivo, são criados em runtime
# e persistidos no Redis/Database cluster.
