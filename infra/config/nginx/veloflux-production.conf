# VeloFlux Enterprise Nginx Configuration
# Production-ready configuration with security hardening

# Main HTTP block
http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    server_tokens off;

    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=web:10m rate=5r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Load balancer upstream pools
    upstream veloflux_backend {
        least_conn;
        server 127.0.0.1:8080 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8081 weight=1 max_fails=3 fail_timeout=30s backup;
        keepalive 32;
    }

    upstream veloflux_admin {
        server 127.0.0.1:9000 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:9001 weight=1 max_fails=3 fail_timeout=30s backup;
        keepalive 16;
    }

    upstream grafana_backend {
        server 127.0.0.1:3001 weight=1 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }

    upstream prometheus_backend {
        server 127.0.0.1:9090 weight=1 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }

    # Main domain - Load Balancer
    server {
        listen 80;
        listen [::]:80;
        server_name veloflux.io www.veloflux.io;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name veloflux.io www.veloflux.io;

        # SSL Configuration
        ssl_certificate /etc/letsencrypt/live/veloflux.io/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/veloflux.io/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/veloflux.io/chain.pem;

        # Security
        limit_req zone=web burst=20 nodelay;
        limit_conn conn_limit_per_ip 20;

        # Logging
        access_log /var/log/nginx/veloflux.access.log;
        error_log /var/log/nginx/veloflux.error.log;

        # Main application
        location / {
            proxy_pass http://veloflux_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Health check endpoint
        location /health {
            proxy_pass http://veloflux_backend/health;
            access_log off;
        }

        # Static assets caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
        }

        # Security - block access to sensitive files
        location ~ /\. {
            deny all;
        }

        location ~ /(config|logs|backup)/ {
            deny all;
        }
    }

    # Admin Panel
    server {
        listen 80;
        listen [::]:80;
        server_name admin.veloflux.io;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name admin.veloflux.io;

        ssl_certificate /etc/letsencrypt/live/admin.veloflux.io/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/admin.veloflux.io/privkey.pem;

        # Restrict access to admin panel
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        # Add your office IPs here
        # allow YOUR_OFFICE_IP;
        deny all;

        access_log /var/log/nginx/admin.access.log;
        error_log /var/log/nginx/admin.error.log;

        location / {
            proxy_pass http://veloflux_admin;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # API Domain
    server {
        listen 80;
        listen [::]:80;
        server_name api.veloflux.io;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name api.veloflux.io;

        ssl_certificate /etc/letsencrypt/live/api.veloflux.io/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.veloflux.io/privkey.pem;

        # API rate limiting
        limit_req zone=api burst=50 nodelay;

        access_log /var/log/nginx/api.access.log;
        error_log /var/log/nginx/api.error.log;

        location / {
            proxy_pass http://veloflux_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers for API
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type";
            
            if ($request_method = 'OPTIONS') {
                return 200;
            }
        }
    }

    # Grafana Monitoring
    server {
        listen 80;
        listen [::]:80;
        server_name grafana.veloflux.io;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name grafana.veloflux.io;

        ssl_certificate /etc/letsencrypt/live/grafana.veloflux.io/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/grafana.veloflux.io/privkey.pem;

        access_log /var/log/nginx/grafana.access.log;

        location / {
            proxy_pass http://grafana_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Prometheus Monitoring
    server {
        listen 80;
        listen [::]:80;
        server_name prometheus.veloflux.io;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name prometheus.veloflux.io;

        ssl_certificate /etc/letsencrypt/live/prometheus.veloflux.io/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/prometheus.veloflux.io/privkey.pem;

        # Restrict access to monitoring
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;

        access_log /var/log/nginx/prometheus.access.log;

        location / {
            proxy_pass http://prometheus_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Default server block (catch-all)
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        
        ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
        ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
        
        server_name _;
        return 444;
    }
}
