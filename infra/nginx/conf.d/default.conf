# VeloFlux Main Load Balancer Configuration
upstream frontend {
    server frontend:80;
}

upstream backend_api {
    server backend:9090;
}

upstream backend_metrics {
    server backend:8080;
}

# Main server block
server {
    listen 80;
    server_name localhost;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Health check endpoint (direct to backend /health)
    location = /health {
        proxy_pass http://backend_api/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        access_log off;
    }

    # API health check (map to backend /health)
    location = /api/health {
        proxy_pass http://backend_api/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        access_log off;
    }

    # Auth endpoints (backend) - manter prefixo /auth
    location /auth/ {
        proxy_pass http://backend_api/auth/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Remove trailing slashes
        rewrite ^(.+)/$  $1 permanent;
    }

    # API Health and Metrics specific routes
    location = /api/metrics {
        proxy_pass http://backend_metrics/metrics;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Backends endpoint - return mock backend data
    location = /api/backends {
        return 200 '[
            {
                "id": "backend-1",
                "address": "backend:9090",
                "pool": "main-pool",
                "status": "healthy",
                "health": "up",
                "weight": 100,
                "connections": 25,
                "response_time": 45.5,
                "error_rate": 0.1,
                "last_check": "2025-06-20T03:25:00Z",
                "region": "us-east-1",
                "version": "1.0.0"
            },
            {
                "id": "backend-2", 
                "address": "backend:8080",
                "pool": "metrics-pool",
                "status": "healthy",
                "health": "up",
                "weight": 50,
                "connections": 12,
                "response_time": 32.1,
                "error_rate": 0.0,
                "last_check": "2025-06-20T03:25:00Z",
                "region": "us-west-2", 
                "version": "1.0.0"
            },
            {
                "id": "backend-3",
                "address": "nginx:80",
                "pool": "frontend-pool",
                "status": "healthy",
                "health": "up", 
                "weight": 75,
                "connections": 18,
                "response_time": 28.3,
                "error_rate": 0.05,
                "last_check": "2025-06-20T03:25:00Z",
                "region": "eu-west-1",
                "version": "1.0.0"
            }
        ]';
        add_header Content-Type application/json;
    }

    # Pools endpoint - return mock pool data
    location = /api/pools {
        return 200 '[
            {
                "name": "main-pool",
                "backends": ["backend:9090"],
                "algorithm": "round_robin",
                "health_check": {"enabled": true, "interval": "30s"},
                "status": "healthy",
                "active_backends": 1,
                "total_backends": 1,
                "requests": 52341,
                "errors": 52
            },
            {
                "name": "metrics-pool", 
                "backends": ["backend:8080"],
                "algorithm": "least_conn",
                "health_check": {"enabled": true, "interval": "10s"},
                "status": "healthy",
                "active_backends": 1,
                "total_backends": 1,
                "requests": 41234,
                "errors": 41
            },
            {
                "name": "frontend-pool",
                "backends": ["nginx:80"],
                "algorithm": "ip_hash",
                "health_check": {"enabled": true, "interval": "15s"},
                "status": "healthy",
                "active_backends": 1,
                "total_backends": 1,
                "requests": 31845,
                "errors": 32
            }
        ]';
        add_header Content-Type application/json;
    }

    # Cluster endpoint - return mock cluster data
    location = /api/cluster {
        return 200 '{
            "status": "healthy",
            "nodes": 2,
            "version": "v1.0.0",
            "regions": ["us-east-1", "us-west-2", "eu-west-1"],
            "uptime": "24h 15m",
            "leader": "node-1"
        }';
        add_header Content-Type application/json;
    }

    # WebSocket endpoint for backends monitoring
    location /api/ws/ {
        proxy_pass http://backend_api/ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # System endpoints - redirect to appropriate backend endpoints
    location /api/system/logs {
        # Return mock logs with more realistic data
        return 200 '{
            "logs": [
                {
                    "id": 1,
                    "timestamp": "2025-06-20T03:30:00Z",
                    "level": "info",
                    "message": "Backend health check passed",
                    "component": "health-checker"
                },
                {
                    "id": 2,
                    "timestamp": "2025-06-20T03:29:45Z", 
                    "level": "debug",
                    "message": "Processing request from 127.0.0.1",
                    "component": "load-balancer"
                }
            ],
            "total": 2,
            "page": 1,
            "limit": 100
        }';
        add_header Content-Type application/json;
    }

    location /api/system/performance {
        # Return more detailed performance data
        return 200 '{
            "cpu": {
                "usage": 25.5,
                "cores": 4,
                "load_avg": [1.2, 1.1, 1.0]
            },
            "memory": {
                "usage": 65.2,
                "total": 8192,
                "available": 2845,
                "buffers": 156
            },
            "disk": {
                "usage": 45.1,
                "total": 100,
                "available": 54.9,
                "io_read": 1245,
                "io_write": 3421
            },
            "network": {
                "bytes_in": 1234567,
                "bytes_out": 9876543,
                "packets_in": 12345,
                "packets_out": 98765
            }
        }';
        add_header Content-Type application/json;
    }

    location /api/system/alerts {
        # Return mock alerts with more data
        return 200 '{
            "alerts": [
                {
                    "id": 1,
                    "type": "warning",
                    "title": "High CPU Usage",
                    "message": "CPU usage is above 80%",
                    "timestamp": "2025-06-20T03:25:00Z",
                    "resolved": false
                },
                {
                    "id": 2,
                    "type": "info", 
                    "title": "Backend Added",
                    "message": "New backend server added to pool",
                    "timestamp": "2025-06-20T03:20:00Z",
                    "resolved": true
                }
            ],
            "total": 2,
            "unresolved": 1
        }';
        add_header Content-Type application/json;
    }

    location /api/metrics/realtime {
        # Return comprehensive realtime metrics
        return 200 '{
            "timestamp": "2025-06-20T03:30:00Z",
            "requests_per_second": 45.2,
            "response_time_avg": 125.5,
            "error_rate": 0.1,
            "total_requests": 125420,
            "total_errors": 125,
            "active_connections": 234,
            "bandwidth": {
                "in": 1234567,
                "out": 9876543
            },
            "backend_stats": [
                {
                    "id": "backend-1",
                    "requests": 52341,
                    "response_time": 45.5,
                    "errors": 52
                },
                {
                    "id": "backend-2", 
                    "requests": 41234,
                    "response_time": 32.1,
                    "errors": 41
                },
                {
                    "id": "backend-3",
                    "requests": 31845,
                    "response_time": 28.3,
                    "errors": 32
                }
            ]
        }';
        add_header Content-Type application/json;
    }

    # API Auth endpoints (backend) - handles /api/auth/* requests
    location /api/auth/ {
        proxy_pass http://backend_api/api/auth/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # API routes (backend) - passar para backend mantendo /api
    location /api/ {
        # Remove trailing slashes for consistent routing
        rewrite ^(.+)/$  $1 permanent;
        
        proxy_pass http://backend_api/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Metrics endpoint (backend)
    location /metrics {
        proxy_pass http://backend_metrics/metrics;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Admin API (backend)
    location /admin/api/ {
        proxy_pass http://backend_api/admin;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Frontend routes (everything else)
    location / {
        proxy_pass http://frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Handle SPA routing
        proxy_intercept_errors on;
        error_page 404 = @fallback;
    }

    # Fallback for SPA routing
    location @fallback {
        proxy_pass http://frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Static assets caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://frontend;
        proxy_set_header Host $host;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}
